name: CI/CD for foodgram with GitHub Actions

on: push

jobs:
  ruff:
    name: Ruff linter
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    steps:
      -
        name: Check out code
        uses: actions/checkout@v4
      -
        name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      -
        name: Display Python version
        run: python -c "import sys; print(sys.version)"
      -
        name: Install Ruff
        run: |
          python -m pip install --upgrade pip
          pip install ruff==0.12.8
          pip install -r ./backend/requirements/prod.txt
      -
        name: Run Ruff
        run: ruff check .

  flake8:
    name: flake linter
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    steps:
      -
        name: Check out code
        uses: actions/checkout@v4
      -
        name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      -
        name: Display Python version
        run: python -c "import sys; print(sys.version)"
      -
        name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8==7.3.0 flake8-isort==6.1.2
          pip install -r ./backend/requirements/prod.txt
      -
        name: Run flake8
        run: python -m flake8 backend/

  # test:
  #   name: Backend tests
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       python-version: ["3.10", "3.11", "3.12"]
  #   services:
  #     postgres:
  #       image: postgres:13.10
  #       env:
  #         POSTGRES_USER: foodgram
  #         POSTGRES_PASSWORD: password
  #         POSTGRES_DB: db
  #       ports:
  #         - 5432:5432
  #       options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
  #   steps:
  #     -
  #       name: Check out code
  #       uses: actions/checkout@v4
  #     -
  #       name: Set up Python ${{ matrix.python-version }}
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #     -
  #       name: Display Python version
  #       run: python -c "import sys; print(sys.version)"
  #     -
  #       name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install -r ./backend/requirements/prod.txt
  #     -
  #       name: Run pytest
  #       env:
  #         POSTGRES_USER: django_user
  #         POSTGRES_PASSWORD: django_password
  #         POSTGRES_DB: django_db
  #         DB_HOST: 127.0.0.1
  #         DB_PORT: 5432
  #       run: pytest

  build_backend_and_push_to_docker_hub:
    name: Push backend Docker image to DockerHub
    # if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs:
      - ruff
      - flake8
      # - test
    steps:
      -
        name: Check out repo
        uses: actions/checkout@v4
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN}}
      -
        name: Push to DockerHub
        uses: docker/build-push-action@v6
        with:
          context: ./backend/
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/foodgram_backend:latest

  build_frontend_and_push_to_docker_hub:
    name:  Push frontend Docker image to DockerHub
    # if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      -
        name: Check out the repo
        uses: actions/checkout@v4
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Push to DockerHub
        uses: docker/build-push-action@v6
        with:
          context: ./frontend/
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/foodgram_frontend:latest
  build_nginx_and_push_to_docker_hub:
    name: Push nginx Docker image to DockerHub
    # if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      -
        name: Check out the repo
        uses: actions/checkout@v4
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Push to DockerHub
        uses: docker/build-push-action@v6
        with:
          context: ./nginx/
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/foodgram_nginx:latest
  deploy:
    name: Deploy project on the server
    # if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs:
      - build_backend_and_push_to_docker_hub
      - build_frontend_and_push_to_docker_hub
      - build_nginx_and_push_to_docker_hub
    steps:
      -
        name: Checkout repo
        uses: actions/checkout@v4
      -
        name: Copy docker-compose.production.yml via ssh
        uses: appleboy/scp-action@v1
        with:
          host: ${{ secrets.HOST}}
          username: ${{ secrets.USER}}
          key: ${{ secrets.KEY}}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: 'docker-compose.production.yml'
          target: 'foodgram'
      -
        name: Executing remote ssh commands to deploy
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.HOST}}
          username: ${{ secrets.USER}}
          key: ${{ secrets.KEY}}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd foodgram/
            sudo docker compose -f docker-compose.production.yml pull
            sudo docker compose -f docker-compose.production.yml down
            sudo docker compose -f docker-compose.production.yml up -d
            sudo docker compose -f docker-compose.production.yml exec backend python manage.py migrate
            sudo docker compose -f docker-compose.production.yml exec backend python manage.py collectstatic
            sudo docker compose -f docker-compose.production.yml exec backend cp -r /app/collectstatic/static

  send_message:
    name: Send message in Telegram
    # if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      -
        name: Send telegram message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_ID }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            ${{ github.actor}}
            Деплой проекта "foodgram"успешно выполнен!
