# Generated by Django 5.2.4 on 2025-08-16 14:38

import apps.core.services
import apps.core.validators
import django.contrib.auth.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('recipes', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(help_text='Уникальное имя пользователя. Должно содержать только латинские буквы, цифры и подчёркивания. Минимум 4 символов(а).', max_length=150, unique=True, validators=[django.core.validators.MinLengthValidator(4, message='Имя пользователя не может быть короче 4 символов(а)'), django.core.validators.RegexValidator(message='Имя пользователя может содержать только латинские буквы, цифры и подчёркивания.', regex='^\\w+$')], verbose_name='имя пользователя')),
                ('email', models.EmailField(help_text='Действующий и уникальный адрес электронной почты, используемый для входа.', max_length=254, unique=True, verbose_name='электронная почта')),
                ('first_name', models.CharField(help_text='Введите имя (только буквы кириллицы или латиницы).', max_length=150, validators=[django.core.validators.MinLengthValidator(4, message='Имя не может быть короче {FIRST_NAME_MIN_LENGTH} символов(а)'), django.core.validators.RegexValidator(message='Допускаются только буквы кириллицы или латиницы.', regex='^[A-Za-zА-Яа-яЁё]+$')], verbose_name='Имя')),
                ('last_name', models.CharField(help_text='Введите фамилию (только буквы кириллицы или латиницы).', max_length=150, validators=[django.core.validators.MinLengthValidator(4, message='Фамилия не может быть короче {LAST_NAME_MIN_LENGTH} символов(а)'), django.core.validators.RegexValidator(message='Допускаются только буквы кириллицы или латиницы.', regex='^[A-Za-zА-Яа-яЁё]+$')], verbose_name='Фамилия')),
                ('avatar', models.ImageField(blank=True, help_text='Загрузите фото в формате jpg, jpeg, png. Максимальный размер: 5МБ.', null=True, upload_to=apps.core.services.get_upload_path, validators=[django.core.validators.FileExtensionValidator(('jpg', 'jpeg', 'png'), 'Недопустимое расширение файла. Разрешены: jpg, jpeg, png'), apps.core.validators.validate_safe_filename, apps.core.validators.validate_file_size], verbose_name='аватар')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'пользователь',
                'verbose_name_plural': 'пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Дата и время создания записи', verbose_name='создано')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Дата и время последнего изменения записи', verbose_name='обновлено')),
                ('recipe', models.ForeignKey(help_text='Рецепт, связанный с пользователем.', on_delete=django.db.models.deletion.CASCADE, to='recipes.recipe', verbose_name='рецепт')),
                ('user', models.ForeignKey(help_text='Пользователь, связанный с рецептом.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='пользователь')),
            ],
            options={
                'verbose_name': 'корзина',
                'verbose_name_plural': 'корзины',
                'ordering': ('-created_at',),
                'abstract': False,
                'default_related_name': 'carts',
            },
        ),
        migrations.CreateModel(
            name='Favorite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Дата и время создания записи', verbose_name='создано')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Дата и время последнего изменения записи', verbose_name='обновлено')),
                ('recipe', models.ForeignKey(help_text='Рецепт, связанный с пользователем.', on_delete=django.db.models.deletion.CASCADE, to='recipes.recipe', verbose_name='рецепт')),
                ('user', models.ForeignKey(help_text='Пользователь, связанный с рецептом.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='пользователь')),
            ],
            options={
                'verbose_name': 'избранное',
                'verbose_name_plural': 'избранные',
                'ordering': ('-created_at',),
                'abstract': False,
                'default_related_name': 'favorites',
            },
        ),
        migrations.CreateModel(
            name='Subscribe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Дата и время создания записи', verbose_name='создано')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Дата и время последнего изменения записи', verbose_name='обновлено')),
                ('author', models.ForeignKey(help_text='Пользователь, на которого подписываются.', on_delete=django.db.models.deletion.CASCADE, related_name='subscribers', to=settings.AUTH_USER_MODEL, verbose_name='автор контента')),
                ('user', models.ForeignKey(help_text='Пользователь, который подписывается.', on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to=settings.AUTH_USER_MODEL, verbose_name='подписчик')),
            ],
            options={
                'verbose_name': 'подписка',
                'verbose_name_plural': 'подписки',
                'ordering': ('-updated_at', '-created_at'),
                'abstract': False,
                'default_related_name': '%(app_label)s_%(class)s',
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['first_name'], name='users_first_name_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['last_name'], name='users_last_name_idx'),
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.CheckConstraint(condition=models.Q(models.Q(('first_name', ''), _negated=True), models.Q(('last_name', ''), _negated=True)), name='first_last_name_not_empty'),
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.UniqueConstraint(fields=('username', 'email'), name='unique_username_email'),
        ),
        migrations.AddConstraint(
            model_name='cart',
            constraint=models.UniqueConstraint(fields=('user', 'recipe'), name='cart_unique_user_recipe'),
        ),
        migrations.AddConstraint(
            model_name='favorite',
            constraint=models.UniqueConstraint(fields=('user', 'recipe'), name='favorite_unique_user_recipe'),
        ),
        migrations.AddConstraint(
            model_name='subscribe',
            constraint=models.UniqueConstraint(fields=('user', 'author'), name='unique_user_author'),
        ),
        migrations.AddConstraint(
            model_name='subscribe',
            constraint=models.CheckConstraint(condition=models.Q(('user__exact', models.F('author')), _negated=True), name='prevent_self_subscribe'),
        ),
    ]
